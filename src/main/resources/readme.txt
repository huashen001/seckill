秒杀高并发分析：

    详情页：1.用户大量刷新 -> CDN静态化处理（css,js）
                                1.加速用户获取数据的系统
                                2.部署在离用户最近的网络节点
                                3.CDN不需要访问后端服务器

            2.秒杀地址接口分析 -> 无法使用CDN，随着时间接口状态会发生变化
                                1.使用服务端缓存：redis
                                2.缓存没有再访问MySQL

            3.秒杀操作接口分析 -> 无法使用CDN，因为库存动态刷新也不能使用服务器缓存,行数据竞争激烈

    方案分析：

    原子计数器 -> redis

    记录行为消息 -> 分布式MQ

    消费消息并落地 -> MySQL

    能抗百万级的TPS,但是都是分布式部署运维。

    为什么不用MySQL解决？
        MySQL的一条update可以支持4w的TPS.
        java事务控制分析：
            等待行级锁,*等待行级锁,*等待行级锁,*等待行级锁（串行等待，阻塞）
            网络延迟
            高并发频繁的GC(大约50ms)
        优化方向：减少行级锁的持有时间 -> 把客户端逻辑放到MySQL服务器执行 -> 使用存储过程，将事务交由MySQL完成

    优化总结：
        1.前端控制：暴露接口，按钮防止重复提交
        2.动静态数据分离，CDN缓存静态资源
        3.后端缓存：redis缓存查询数据
        4.事务竞争：存储过程

    存储过程：

        DELIMITER $$ -- console中 ; 转换为 $

        in 标示输入参数，out标示输出参数
